//using count of subset sum problem

#include <bits/stdc++.h>
using namespace std;

int subsetsum(int wt[],int w,int n){
    int dp[n+1][w+1];
    
    for(int i=0;i<=n;i++){
        dp[i][0]=1;
    }
    for(int j=1;j<=w;j++){
        dp[0][j]=0;
    }
    
    for(int i=1;i<=n;i++){
        for(int j=1;j<=w;j++){
            
            if(wt[i-1]>j){
                dp[i][j] =dp[i-1][j]; 
             }
    
            else if(wt[i-1]<=j){
                dp[i][j] = dp[i-1][j-wt[i-1]] + dp[i-1][j] ;
                
                }
        }
        
    }    
    return dp[n][w];
}


int main() {
	
	int n,diff;
	cin>>n>>diff;
	
	int wt[n];
	for(int i=0;i<n;i++){
	    cin>>wt[i];
	}
	
	int sum=0;
	for(int i=0;i<n;i++){
	    sum+=wt[i];
	}
    
    //s1-s2=diff 
    //s1+s2 = sum 
    //so 2*s1=diff+sum
    //count how many subsets are present with sum==s1  --> gives the answer for this question
    
    int s1;
    s1=(diff+sum)/2;
    
	cout<<subsetsum(wt,s1,n); 
	
	return 0;
	
}
